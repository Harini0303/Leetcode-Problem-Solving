// https://leetcode.com/problems/pascals-triangle/description/


Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]


//problem variant : 1

public class Main
{
	public static void main(String[] args) {
		int r = 5, c=3;
		
		int ans = pascalTriangle(r, c);
		System.out.println(ans);
		
		
	}
	
	
	public static int pascalTriangle(int r, int c) {
        int element = (int) nCr(r - 1, c - 1);
        return element;
    }
    
	public static long nCr(int n,int r){
	    long res =1;
	    
	    for(int i=0;i<r;i++){
	        res = res * (n-i);
	        res = res / (i+1);
	    }
	    return res;
	}
}

//problem variant : 2

public class Main
{
	public static void main(String[] args) {
		int n=5;
		
		pascalTriangle(n);
		
		
	}
	
	
	public static void pascalTriangle(int n) {
        for(int c=1;c<=n;c++){
            System.out.print(nCr(n - 1, c - 1) + " ");
        }
        
    }
    
	public static long nCr(int n,int r){
	    long res =1;
	    
	    for(int i=0;i<r;i++){
	        res = res * (n-i);
	        res = res / (i+1);
	    }
	    return res;
	}
}

//optimal 

import java.util.*;

public class Pascal {

    static void pascalTriangle(int n) {
        long ans = 1;
        System.out.print(ans + " "); // printing 1st element

        // Printing the rest of the part:
        for (int i = 1; i < n; i++) {
            ans = ans * (n - i);
            ans = ans / i;
            System.out.print(ans + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int n = 5;
        pascalTriangle(n);
    }
}




//problem variant : 3
class Solution {
    public List<List<Integer>> generate(int numRows) {
         List<List<Integer>> result = new ArrayList<>();
        

        for(int i=1;i<=numRows;i++){
            List<Integer> temp = new ArrayList<>();
            for(int j=1;j<=i;j++){
                temp.add(pascal(i-1,j-1));
            }
            result.add(temp);

        }
        return result;
        
    }

    public static int pascal(int r,int c){
        int ans = 1;
        for(int i=0;i<c;i++){
            ans = ans * (r-i);
            ans = ans / (i+1);
        }
        return ans;

    }
}