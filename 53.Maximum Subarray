//problem : https://leetcode.com/problems/maximum-subarray/description/

Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

class Solution {
    public int maxSubArray(int[] nums) {
        int maxi = Integer.MIN_VALUE;  
        int sum = 0;
        int n = nums.length;

        for (int i = 0; i < n; i++) {

            sum += nums[i];

            if (sum > maxi) {
                maxi = sum;
			}
            if (sum < 0) {
                sum = 0;
            } 
        }

        return maxi;
        
    }
}

class Solution {
    public int maxSubArray(int[] nums) {
    // if sum goes to negative make sum = 0 otherwise keep on adding
        int sum = 0;
        int maxSum = nums[0];

        for(int i=0;i<nums.length;i++){
            sum = sum + nums[i];
            maxSum = sum>maxSum?sum:maxSum;
            if(sum<0){
                sum =0;
            }
        }
        return maxSum;
    }
}