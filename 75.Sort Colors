//problem : https://leetcode.com/problems/sort-colors/description/

Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]

// class Solution {
//     public void sortColors(int[] nums) {
//         Arrays.sort(nums);
        
//     }
// }

// class Solution {
//     public void sortColors(int[] nums) {

//         int n = nums.length;
//         for(int i=0;i<n-1;i++){
//             int minimum = i;
//             for(int j=i+1;j<n;j++){
//                 if(nums[j] < nums[minimum]){
//                  minimum =j;
//                 }    
                      
//             }
//              int temp = nums[minimum];
//             nums[minimum] = nums[i];
//             nums[i] = temp;

//         }
//     }
// }

class Solution {
    public void sortColors(int[] arr) {
        int n = arr.length;
         int low = 0, mid = 0, high = n - 1;

        while (mid <= high) {
            if (arr[mid] == 0) {
         
                int temp = arr[low];
                arr[low] = arr[mid];
                arr[mid] = temp;

                low++;
                mid++;
                 
            } else if (arr[mid] == 1) {
                mid++;

            } else {
                int temp = arr[mid];
                arr[mid] = arr[high];
                arr[high] = temp;

                high--;
        
    }
    }
    }
}